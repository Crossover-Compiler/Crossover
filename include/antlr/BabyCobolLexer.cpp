
// Generated from /home/manzi/repos/Crossover/grammar/BabyCobol.g4 by ANTLR 4.12.0


#include "BabyCobolLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct BabyCobolLexerStaticData final {
  BabyCobolLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  BabyCobolLexerStaticData(const BabyCobolLexerStaticData&) = delete;
  BabyCobolLexerStaticData(BabyCobolLexerStaticData&&) = delete;
  BabyCobolLexerStaticData& operator=(const BabyCobolLexerStaticData&) = delete;
  BabyCobolLexerStaticData& operator=(BabyCobolLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag babycobollexerLexerOnceFlag;
BabyCobolLexerStaticData *babycobollexerLexerStaticData = nullptr;

void babycobollexerLexerInitialize() {
  assert(babycobollexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<BabyCobolLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "STRUCT", "PRIMITIVE", "IDENTIFICATION", "DIVISION", 
      "PROCEDURE", "DATA", "DISPLAY", "WITH", "NO", "ADVANCING", "STOP", 
      "MOVE", "TO", "SUBTRACT", "FROM", "GIVING", "MULTIPLY", "BY", "PERFORM", 
      "TIMES", "IF", "THEN", "ELSE", "END", "ACCEPT", "ADD", "DIVIDE", "INTO", 
      "EVALUATE", "WHEN", "OTHER", "TRUE", "FALSE", "NOT", "OR", "AND", 
      "XOR", "NEXT", "SENTENCE", "REMAINDER", "LOOP", "VARYING", "WHILE", 
      "UNTIL", "OF", "THROUGH", "PICTURE", "IS", "LIKE", "OCCURS", "GO", 
      "SPACES", "HIGH", "LOW", "SIGNAL", "ONERROR", "OFF", "ALTER", "PROCEED", 
      "CALL", "RETURNING", "BYVALUE", "BYREFERENCE", "RETURNINGBYREFERENCE", 
      "USING", "AS", "NEQ", "LTE", "LT", "EQ", "GT", "GTE", "SYMBOL_PLUS", 
      "SYMBOL_MINUS", "SYMBOL_MULT", "SYMBOL_DIV", "SYMBOL_EXP", "WS", "FUNCTIONNAME", 
      "INT", "DOUBLE", "LITERAL", "DOT", "IDENTIFIER", "COMMENTLINE"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'('", "')'", "'STRUCT'", "'PRIMITIVE'", "'IDENTIFICATION'", "'DIVISION'", 
      "'PROCEDURE'", "'DATA'", "'DISPLAY'", "'WITH'", "'NO'", "'ADVANCING'", 
      "'STOP'", "'MOVE'", "'TO'", "'SUBTRACT'", "'FROM'", "'GIVING'", "'MULTIPLY'", 
      "'BY'", "'PERFORM'", "'TIMES'", "'IF'", "'THEN'", "'ELSE'", "'END'", 
      "'ACCEPT'", "'ADD'", "'DIVIDE'", "'INTO'", "'EVALUATE'", "'WHEN'", 
      "'OTHER'", "'TRUE'", "'FALSE'", "'NOT'", "'OR'", "'AND'", "'XOR'", 
      "'NEXT'", "'SENTENCE'", "'REMAINDER'", "'LOOP'", "'VARYING'", "'WHILE'", 
      "'UNTIL'", "'OF'", "'THROUGH'", "'PICTURE'", "'IS'", "'LIKE'", "'OCCURS'", 
      "'GO'", "'SPACES'", "'HIGH-VALUES'", "'LOW-VALUES'", "'SIGNAL'", "'ON ERROR'", 
      "'OFF'", "'ALTER'", "'PROCEED'", "'CALL'", "'RETURNING'", "'BY VALUE'", 
      "'BY REFERENCE'", "", "'USING'", "'AS'", "'!='", "'<='", "'<'", "'='", 
      "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'**'", "", "", "", "", 
      "", "'.'"
    },
    std::vector<std::string>{
      "", "", "", "STRUCT", "PRIMITIVE", "IDENTIFICATION", "DIVISION", "PROCEDURE", 
      "DATA", "DISPLAY", "WITH", "NO", "ADVANCING", "STOP", "MOVE", "TO", 
      "SUBTRACT", "FROM", "GIVING", "MULTIPLY", "BY", "PERFORM", "TIMES", 
      "IF", "THEN", "ELSE", "END", "ACCEPT", "ADD", "DIVIDE", "INTO", "EVALUATE", 
      "WHEN", "OTHER", "TRUE", "FALSE", "NOT", "OR", "AND", "XOR", "NEXT", 
      "SENTENCE", "REMAINDER", "LOOP", "VARYING", "WHILE", "UNTIL", "OF", 
      "THROUGH", "PICTURE", "IS", "LIKE", "OCCURS", "GO", "SPACES", "HIGH", 
      "LOW", "SIGNAL", "ONERROR", "OFF", "ALTER", "PROCEED", "CALL", "RETURNING", 
      "BYVALUE", "BYREFERENCE", "RETURNINGBYREFERENCE", "USING", "AS", "NEQ", 
      "LTE", "LT", "EQ", "GT", "GTE", "SYMBOL_PLUS", "SYMBOL_MINUS", "SYMBOL_MULT", 
      "SYMBOL_DIV", "SYMBOL_EXP", "WS", "FUNCTIONNAME", "INT", "DOUBLE", 
      "LITERAL", "DOT", "IDENTIFIER", "COMMENTLINE"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,87,694,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
  	1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
  	4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,
  	1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
  	8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
  	11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,
  	13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
  	15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,
  	18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,
  	20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
  	23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
  	26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
  	30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,
  	35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,
  	39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,
  	41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,
  	43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,
  	45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,
  	47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,
  	50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,
  	52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,
  	54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
  	55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,
  	57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,
  	62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,
  	63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
  	64,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,
  	67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,
  	73,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,78,1,
  	79,4,79,634,8,79,11,79,12,79,635,1,79,1,79,1,80,1,80,1,80,1,80,1,81,4,
  	81,645,8,81,11,81,12,81,646,1,82,3,82,650,8,82,1,82,1,82,1,82,1,82,1,
  	83,1,83,4,83,658,8,83,11,83,12,83,659,1,83,1,83,1,84,1,84,1,85,4,85,667,
  	8,85,11,85,12,85,668,1,85,4,85,672,8,85,11,85,12,85,673,1,85,4,85,677,
  	8,85,11,85,12,85,678,5,85,681,8,85,10,85,12,85,684,9,85,1,86,1,86,5,86,
  	688,8,86,10,86,12,86,691,9,86,1,86,1,86,0,0,87,1,1,3,2,5,3,7,4,9,5,11,
  	6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
  	30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
  	83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
  	53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,
  	63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,
  	73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,
  	83,167,84,169,85,171,86,173,87,1,0,7,3,0,9,10,12,13,32,32,1,0,48,57,2,
  	0,43,43,45,45,1,0,34,34,3,0,48,57,65,90,97,122,2,0,45,45,95,95,2,0,10,
  	10,13,13,702,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
  	0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
  	0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
  	1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
  	0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
  	0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
  	1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
  	0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
  	0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
  	1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
  	0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,
  	0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
  	0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,
  	0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,
  	0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,
  	0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,
  	0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,1,175,1,
  	0,0,0,3,177,1,0,0,0,5,179,1,0,0,0,7,186,1,0,0,0,9,196,1,0,0,0,11,211,
  	1,0,0,0,13,220,1,0,0,0,15,230,1,0,0,0,17,235,1,0,0,0,19,243,1,0,0,0,21,
  	248,1,0,0,0,23,251,1,0,0,0,25,261,1,0,0,0,27,266,1,0,0,0,29,271,1,0,0,
  	0,31,274,1,0,0,0,33,283,1,0,0,0,35,288,1,0,0,0,37,295,1,0,0,0,39,304,
  	1,0,0,0,41,307,1,0,0,0,43,315,1,0,0,0,45,321,1,0,0,0,47,324,1,0,0,0,49,
  	329,1,0,0,0,51,334,1,0,0,0,53,338,1,0,0,0,55,345,1,0,0,0,57,349,1,0,0,
  	0,59,356,1,0,0,0,61,361,1,0,0,0,63,370,1,0,0,0,65,375,1,0,0,0,67,381,
  	1,0,0,0,69,386,1,0,0,0,71,392,1,0,0,0,73,396,1,0,0,0,75,399,1,0,0,0,77,
  	403,1,0,0,0,79,407,1,0,0,0,81,412,1,0,0,0,83,421,1,0,0,0,85,431,1,0,0,
  	0,87,436,1,0,0,0,89,444,1,0,0,0,91,450,1,0,0,0,93,456,1,0,0,0,95,459,
  	1,0,0,0,97,467,1,0,0,0,99,475,1,0,0,0,101,478,1,0,0,0,103,483,1,0,0,0,
  	105,490,1,0,0,0,107,493,1,0,0,0,109,500,1,0,0,0,111,512,1,0,0,0,113,523,
  	1,0,0,0,115,530,1,0,0,0,117,539,1,0,0,0,119,543,1,0,0,0,121,549,1,0,0,
  	0,123,557,1,0,0,0,125,562,1,0,0,0,127,572,1,0,0,0,129,581,1,0,0,0,131,
  	594,1,0,0,0,133,597,1,0,0,0,135,603,1,0,0,0,137,606,1,0,0,0,139,609,1,
  	0,0,0,141,612,1,0,0,0,143,614,1,0,0,0,145,616,1,0,0,0,147,618,1,0,0,0,
  	149,621,1,0,0,0,151,623,1,0,0,0,153,625,1,0,0,0,155,627,1,0,0,0,157,629,
  	1,0,0,0,159,633,1,0,0,0,161,639,1,0,0,0,163,644,1,0,0,0,165,649,1,0,0,
  	0,167,655,1,0,0,0,169,663,1,0,0,0,171,666,1,0,0,0,173,685,1,0,0,0,175,
  	176,5,40,0,0,176,2,1,0,0,0,177,178,5,41,0,0,178,4,1,0,0,0,179,180,5,83,
  	0,0,180,181,5,84,0,0,181,182,5,82,0,0,182,183,5,85,0,0,183,184,5,67,0,
  	0,184,185,5,84,0,0,185,6,1,0,0,0,186,187,5,80,0,0,187,188,5,82,0,0,188,
  	189,5,73,0,0,189,190,5,77,0,0,190,191,5,73,0,0,191,192,5,84,0,0,192,193,
  	5,73,0,0,193,194,5,86,0,0,194,195,5,69,0,0,195,8,1,0,0,0,196,197,5,73,
  	0,0,197,198,5,68,0,0,198,199,5,69,0,0,199,200,5,78,0,0,200,201,5,84,0,
  	0,201,202,5,73,0,0,202,203,5,70,0,0,203,204,5,73,0,0,204,205,5,67,0,0,
  	205,206,5,65,0,0,206,207,5,84,0,0,207,208,5,73,0,0,208,209,5,79,0,0,209,
  	210,5,78,0,0,210,10,1,0,0,0,211,212,5,68,0,0,212,213,5,73,0,0,213,214,
  	5,86,0,0,214,215,5,73,0,0,215,216,5,83,0,0,216,217,5,73,0,0,217,218,5,
  	79,0,0,218,219,5,78,0,0,219,12,1,0,0,0,220,221,5,80,0,0,221,222,5,82,
  	0,0,222,223,5,79,0,0,223,224,5,67,0,0,224,225,5,69,0,0,225,226,5,68,0,
  	0,226,227,5,85,0,0,227,228,5,82,0,0,228,229,5,69,0,0,229,14,1,0,0,0,230,
  	231,5,68,0,0,231,232,5,65,0,0,232,233,5,84,0,0,233,234,5,65,0,0,234,16,
  	1,0,0,0,235,236,5,68,0,0,236,237,5,73,0,0,237,238,5,83,0,0,238,239,5,
  	80,0,0,239,240,5,76,0,0,240,241,5,65,0,0,241,242,5,89,0,0,242,18,1,0,
  	0,0,243,244,5,87,0,0,244,245,5,73,0,0,245,246,5,84,0,0,246,247,5,72,0,
  	0,247,20,1,0,0,0,248,249,5,78,0,0,249,250,5,79,0,0,250,22,1,0,0,0,251,
  	252,5,65,0,0,252,253,5,68,0,0,253,254,5,86,0,0,254,255,5,65,0,0,255,256,
  	5,78,0,0,256,257,5,67,0,0,257,258,5,73,0,0,258,259,5,78,0,0,259,260,5,
  	71,0,0,260,24,1,0,0,0,261,262,5,83,0,0,262,263,5,84,0,0,263,264,5,79,
  	0,0,264,265,5,80,0,0,265,26,1,0,0,0,266,267,5,77,0,0,267,268,5,79,0,0,
  	268,269,5,86,0,0,269,270,5,69,0,0,270,28,1,0,0,0,271,272,5,84,0,0,272,
  	273,5,79,0,0,273,30,1,0,0,0,274,275,5,83,0,0,275,276,5,85,0,0,276,277,
  	5,66,0,0,277,278,5,84,0,0,278,279,5,82,0,0,279,280,5,65,0,0,280,281,5,
  	67,0,0,281,282,5,84,0,0,282,32,1,0,0,0,283,284,5,70,0,0,284,285,5,82,
  	0,0,285,286,5,79,0,0,286,287,5,77,0,0,287,34,1,0,0,0,288,289,5,71,0,0,
  	289,290,5,73,0,0,290,291,5,86,0,0,291,292,5,73,0,0,292,293,5,78,0,0,293,
  	294,5,71,0,0,294,36,1,0,0,0,295,296,5,77,0,0,296,297,5,85,0,0,297,298,
  	5,76,0,0,298,299,5,84,0,0,299,300,5,73,0,0,300,301,5,80,0,0,301,302,5,
  	76,0,0,302,303,5,89,0,0,303,38,1,0,0,0,304,305,5,66,0,0,305,306,5,89,
  	0,0,306,40,1,0,0,0,307,308,5,80,0,0,308,309,5,69,0,0,309,310,5,82,0,0,
  	310,311,5,70,0,0,311,312,5,79,0,0,312,313,5,82,0,0,313,314,5,77,0,0,314,
  	42,1,0,0,0,315,316,5,84,0,0,316,317,5,73,0,0,317,318,5,77,0,0,318,319,
  	5,69,0,0,319,320,5,83,0,0,320,44,1,0,0,0,321,322,5,73,0,0,322,323,5,70,
  	0,0,323,46,1,0,0,0,324,325,5,84,0,0,325,326,5,72,0,0,326,327,5,69,0,0,
  	327,328,5,78,0,0,328,48,1,0,0,0,329,330,5,69,0,0,330,331,5,76,0,0,331,
  	332,5,83,0,0,332,333,5,69,0,0,333,50,1,0,0,0,334,335,5,69,0,0,335,336,
  	5,78,0,0,336,337,5,68,0,0,337,52,1,0,0,0,338,339,5,65,0,0,339,340,5,67,
  	0,0,340,341,5,67,0,0,341,342,5,69,0,0,342,343,5,80,0,0,343,344,5,84,0,
  	0,344,54,1,0,0,0,345,346,5,65,0,0,346,347,5,68,0,0,347,348,5,68,0,0,348,
  	56,1,0,0,0,349,350,5,68,0,0,350,351,5,73,0,0,351,352,5,86,0,0,352,353,
  	5,73,0,0,353,354,5,68,0,0,354,355,5,69,0,0,355,58,1,0,0,0,356,357,5,73,
  	0,0,357,358,5,78,0,0,358,359,5,84,0,0,359,360,5,79,0,0,360,60,1,0,0,0,
  	361,362,5,69,0,0,362,363,5,86,0,0,363,364,5,65,0,0,364,365,5,76,0,0,365,
  	366,5,85,0,0,366,367,5,65,0,0,367,368,5,84,0,0,368,369,5,69,0,0,369,62,
  	1,0,0,0,370,371,5,87,0,0,371,372,5,72,0,0,372,373,5,69,0,0,373,374,5,
  	78,0,0,374,64,1,0,0,0,375,376,5,79,0,0,376,377,5,84,0,0,377,378,5,72,
  	0,0,378,379,5,69,0,0,379,380,5,82,0,0,380,66,1,0,0,0,381,382,5,84,0,0,
  	382,383,5,82,0,0,383,384,5,85,0,0,384,385,5,69,0,0,385,68,1,0,0,0,386,
  	387,5,70,0,0,387,388,5,65,0,0,388,389,5,76,0,0,389,390,5,83,0,0,390,391,
  	5,69,0,0,391,70,1,0,0,0,392,393,5,78,0,0,393,394,5,79,0,0,394,395,5,84,
  	0,0,395,72,1,0,0,0,396,397,5,79,0,0,397,398,5,82,0,0,398,74,1,0,0,0,399,
  	400,5,65,0,0,400,401,5,78,0,0,401,402,5,68,0,0,402,76,1,0,0,0,403,404,
  	5,88,0,0,404,405,5,79,0,0,405,406,5,82,0,0,406,78,1,0,0,0,407,408,5,78,
  	0,0,408,409,5,69,0,0,409,410,5,88,0,0,410,411,5,84,0,0,411,80,1,0,0,0,
  	412,413,5,83,0,0,413,414,5,69,0,0,414,415,5,78,0,0,415,416,5,84,0,0,416,
  	417,5,69,0,0,417,418,5,78,0,0,418,419,5,67,0,0,419,420,5,69,0,0,420,82,
  	1,0,0,0,421,422,5,82,0,0,422,423,5,69,0,0,423,424,5,77,0,0,424,425,5,
  	65,0,0,425,426,5,73,0,0,426,427,5,78,0,0,427,428,5,68,0,0,428,429,5,69,
  	0,0,429,430,5,82,0,0,430,84,1,0,0,0,431,432,5,76,0,0,432,433,5,79,0,0,
  	433,434,5,79,0,0,434,435,5,80,0,0,435,86,1,0,0,0,436,437,5,86,0,0,437,
  	438,5,65,0,0,438,439,5,82,0,0,439,440,5,89,0,0,440,441,5,73,0,0,441,442,
  	5,78,0,0,442,443,5,71,0,0,443,88,1,0,0,0,444,445,5,87,0,0,445,446,5,72,
  	0,0,446,447,5,73,0,0,447,448,5,76,0,0,448,449,5,69,0,0,449,90,1,0,0,0,
  	450,451,5,85,0,0,451,452,5,78,0,0,452,453,5,84,0,0,453,454,5,73,0,0,454,
  	455,5,76,0,0,455,92,1,0,0,0,456,457,5,79,0,0,457,458,5,70,0,0,458,94,
  	1,0,0,0,459,460,5,84,0,0,460,461,5,72,0,0,461,462,5,82,0,0,462,463,5,
  	79,0,0,463,464,5,85,0,0,464,465,5,71,0,0,465,466,5,72,0,0,466,96,1,0,
  	0,0,467,468,5,80,0,0,468,469,5,73,0,0,469,470,5,67,0,0,470,471,5,84,0,
  	0,471,472,5,85,0,0,472,473,5,82,0,0,473,474,5,69,0,0,474,98,1,0,0,0,475,
  	476,5,73,0,0,476,477,5,83,0,0,477,100,1,0,0,0,478,479,5,76,0,0,479,480,
  	5,73,0,0,480,481,5,75,0,0,481,482,5,69,0,0,482,102,1,0,0,0,483,484,5,
  	79,0,0,484,485,5,67,0,0,485,486,5,67,0,0,486,487,5,85,0,0,487,488,5,82,
  	0,0,488,489,5,83,0,0,489,104,1,0,0,0,490,491,5,71,0,0,491,492,5,79,0,
  	0,492,106,1,0,0,0,493,494,5,83,0,0,494,495,5,80,0,0,495,496,5,65,0,0,
  	496,497,5,67,0,0,497,498,5,69,0,0,498,499,5,83,0,0,499,108,1,0,0,0,500,
  	501,5,72,0,0,501,502,5,73,0,0,502,503,5,71,0,0,503,504,5,72,0,0,504,505,
  	5,45,0,0,505,506,5,86,0,0,506,507,5,65,0,0,507,508,5,76,0,0,508,509,5,
  	85,0,0,509,510,5,69,0,0,510,511,5,83,0,0,511,110,1,0,0,0,512,513,5,76,
  	0,0,513,514,5,79,0,0,514,515,5,87,0,0,515,516,5,45,0,0,516,517,5,86,0,
  	0,517,518,5,65,0,0,518,519,5,76,0,0,519,520,5,85,0,0,520,521,5,69,0,0,
  	521,522,5,83,0,0,522,112,1,0,0,0,523,524,5,83,0,0,524,525,5,73,0,0,525,
  	526,5,71,0,0,526,527,5,78,0,0,527,528,5,65,0,0,528,529,5,76,0,0,529,114,
  	1,0,0,0,530,531,5,79,0,0,531,532,5,78,0,0,532,533,5,32,0,0,533,534,5,
  	69,0,0,534,535,5,82,0,0,535,536,5,82,0,0,536,537,5,79,0,0,537,538,5,82,
  	0,0,538,116,1,0,0,0,539,540,5,79,0,0,540,541,5,70,0,0,541,542,5,70,0,
  	0,542,118,1,0,0,0,543,544,5,65,0,0,544,545,5,76,0,0,545,546,5,84,0,0,
  	546,547,5,69,0,0,547,548,5,82,0,0,548,120,1,0,0,0,549,550,5,80,0,0,550,
  	551,5,82,0,0,551,552,5,79,0,0,552,553,5,67,0,0,553,554,5,69,0,0,554,555,
  	5,69,0,0,555,556,5,68,0,0,556,122,1,0,0,0,557,558,5,67,0,0,558,559,5,
  	65,0,0,559,560,5,76,0,0,560,561,5,76,0,0,561,124,1,0,0,0,562,563,5,82,
  	0,0,563,564,5,69,0,0,564,565,5,84,0,0,565,566,5,85,0,0,566,567,5,82,0,
  	0,567,568,5,78,0,0,568,569,5,73,0,0,569,570,5,78,0,0,570,571,5,71,0,0,
  	571,126,1,0,0,0,572,573,5,66,0,0,573,574,5,89,0,0,574,575,5,32,0,0,575,
  	576,5,86,0,0,576,577,5,65,0,0,577,578,5,76,0,0,578,579,5,85,0,0,579,580,
  	5,69,0,0,580,128,1,0,0,0,581,582,5,66,0,0,582,583,5,89,0,0,583,584,5,
  	32,0,0,584,585,5,82,0,0,585,586,5,69,0,0,586,587,5,70,0,0,587,588,5,69,
  	0,0,588,589,5,82,0,0,589,590,5,69,0,0,590,591,5,78,0,0,591,592,5,67,0,
  	0,592,593,5,69,0,0,593,130,1,0,0,0,594,595,3,125,62,0,595,596,3,129,64,
  	0,596,132,1,0,0,0,597,598,5,85,0,0,598,599,5,83,0,0,599,600,5,73,0,0,
  	600,601,5,78,0,0,601,602,5,71,0,0,602,134,1,0,0,0,603,604,5,65,0,0,604,
  	605,5,83,0,0,605,136,1,0,0,0,606,607,5,33,0,0,607,608,5,61,0,0,608,138,
  	1,0,0,0,609,610,5,60,0,0,610,611,5,61,0,0,611,140,1,0,0,0,612,613,5,60,
  	0,0,613,142,1,0,0,0,614,615,5,61,0,0,615,144,1,0,0,0,616,617,5,62,0,0,
  	617,146,1,0,0,0,618,619,5,62,0,0,619,620,5,61,0,0,620,148,1,0,0,0,621,
  	622,5,43,0,0,622,150,1,0,0,0,623,624,5,45,0,0,624,152,1,0,0,0,625,626,
  	5,42,0,0,626,154,1,0,0,0,627,628,5,47,0,0,628,156,1,0,0,0,629,630,5,42,
  	0,0,630,631,5,42,0,0,631,158,1,0,0,0,632,634,7,0,0,0,633,632,1,0,0,0,
  	634,635,1,0,0,0,635,633,1,0,0,0,635,636,1,0,0,0,636,637,1,0,0,0,637,638,
  	6,79,0,0,638,160,1,0,0,0,639,640,5,39,0,0,640,641,3,171,85,0,641,642,
  	5,39,0,0,642,162,1,0,0,0,643,645,7,1,0,0,644,643,1,0,0,0,645,646,1,0,
  	0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,164,1,0,0,0,648,650,7,2,0,0,649,
  	648,1,0,0,0,649,650,1,0,0,0,650,651,1,0,0,0,651,652,3,163,81,0,652,653,
  	5,44,0,0,653,654,3,163,81,0,654,166,1,0,0,0,655,657,5,34,0,0,656,658,
  	8,3,0,0,657,656,1,0,0,0,658,659,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,
  	0,660,661,1,0,0,0,661,662,5,34,0,0,662,168,1,0,0,0,663,664,5,46,0,0,664,
  	170,1,0,0,0,665,667,7,4,0,0,666,665,1,0,0,0,667,668,1,0,0,0,668,666,1,
  	0,0,0,668,669,1,0,0,0,669,682,1,0,0,0,670,672,7,5,0,0,671,670,1,0,0,0,
  	672,673,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,676,1,0,0,0,675,677,
  	7,4,0,0,676,675,1,0,0,0,677,678,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,
  	0,679,681,1,0,0,0,680,671,1,0,0,0,681,684,1,0,0,0,682,680,1,0,0,0,682,
  	683,1,0,0,0,683,172,1,0,0,0,684,682,1,0,0,0,685,689,5,42,0,0,686,688,
  	8,6,0,0,687,686,1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,0,689,690,1,0,0,
  	0,690,692,1,0,0,0,691,689,1,0,0,0,692,693,6,86,0,0,693,174,1,0,0,0,10,
  	0,635,646,649,659,668,673,678,682,689,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  babycobollexerLexerStaticData = staticData.release();
}

}

BabyCobolLexer::BabyCobolLexer(CharStream *input) : Lexer(input) {
  BabyCobolLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *babycobollexerLexerStaticData->atn, babycobollexerLexerStaticData->decisionToDFA, babycobollexerLexerStaticData->sharedContextCache);
}

BabyCobolLexer::~BabyCobolLexer() {
  delete _interpreter;
}

std::string BabyCobolLexer::getGrammarFileName() const {
  return "BabyCobol.g4";
}

const std::vector<std::string>& BabyCobolLexer::getRuleNames() const {
  return babycobollexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& BabyCobolLexer::getChannelNames() const {
  return babycobollexerLexerStaticData->channelNames;
}

const std::vector<std::string>& BabyCobolLexer::getModeNames() const {
  return babycobollexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& BabyCobolLexer::getVocabulary() const {
  return babycobollexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView BabyCobolLexer::getSerializedATN() const {
  return babycobollexerLexerStaticData->serializedATN;
}

const atn::ATN& BabyCobolLexer::getATN() const {
  return *babycobollexerLexerStaticData->atn;
}




void BabyCobolLexer::initialize() {
  ::antlr4::internal::call_once(babycobollexerLexerOnceFlag, babycobollexerLexerInitialize);
}
